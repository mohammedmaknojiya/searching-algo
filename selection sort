a=[2,3,4,2,1,5,0,7]

for i in range(len(a)):
    min_value_index = i

    for j in range(i+1,len(a)):
        if a[min_value_index]  > a[j] :
            min_value_index=j

    a[i],a[min_value_index]=a[min_value_index],a[i]
print(a)


time complexity:
best case:_n_(n^2)
worst case:O(n^2)
average case:8(n^2)

note:
Selection sort is not difficult to analyze compared to other sorting algorithms since none of the loops 
depend on the data in the array. Selecting the minimum requires
scanning {\displaystyle n}n elements (taking {\displaystyle n-1}n-1 comparisons) and 
then swapping it into the first position. Finding the next lowest element requires scanning 
the remaining {\displaystyle n-1}n-1 elements and so on. Therefore, the total number of comparisons is
(n-1)+(n-2)+......+1 = summation from i to n-1 of(i)
and that is n(n+1)/2 here n=n-1   hence 1/2(n^2 - n )

which is of complexity {\displaystyle O(n^{2})}O(n^{2}) in terms of number of comparisons. 
Each of these scans requires one swap for {\displaystyle n-1}n-1 elements
(the final element is already in place).


It has an O(n2) time complexity, which makes it inefficient on large lists.

Selection sort is noted for its simplicity and has performance advantages over 
more complicated algorithms in certain situations, particularly where auxiliary memory is limited.

 One thing which distinguishes selection sort from other sorting algorithms is that it makes the minimum 
 possible number of swaps, n âˆ’ 1 in the worst case.
 matlab jaisa isma hame pehla minimum value ka index find karta hai and then only usko swap marta hai.
 na ki bubble sort ki tarah continuous swap marta hai.
 kyu ki swap operation memory consuming hota hai 
