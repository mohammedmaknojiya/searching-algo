class linked_list:
    class node:
        __slots__ = 'data','next'
        def __init__(self,data=None,next=None):
            self.data=data
            self.next=next

    def __init__(self):
        self.head=None
        self.tail=None
        self.size=0

    def length(self):
        return len(self.size)

    def is_empty(self):
        return self.size==0

    def insert_at_begin(self,val):
        node=self.node(val,None)
        if self.is_empty():
            self.head=node
            self.tail=node
            self.size+=1

        else:
            node.next=self.head
            self.head = node
            self.size+=1

    def inser_at_last(self,val):
        node=self.node(val,None)
        if self.is_empty():
            self.head = node
            self.tail = node
            self.size += 1
        else:
            self.tail.next=node
            self.tail=node
            self.size+=1

    def inert_in_bet(self,val,pos):
        node = self.node(val, None)
        if self.is_empty():
            self.head = node
            self.tail = node
            self.size += 1
        else:
            i=1
            head1=self.head
            while(i<pos):
                head1=head1.next
                i+=1
            node.next=head1.next
            head1.next=node
            self.size+=1

    def remove_first(self):
        if self.is_empty():
            print("list is empty")
        else:
            value_deleted=self.head.data
            self.head=self.head.next
            self.size-=1
        if self.is_empty():
            self.tail=None
        return value_deleted


    def remove_last(self):
        if self.is_empty():
            print("list is empty")
        else:
            head1=self.head
            i=0
            while(i< self.size-2):
                head1=head1.next
                i+=1
            value_deleted=self.tail.data
            head1.next=None
            self.tail=head1
            self.size-=1
        #if self.is_empty():
            #self.head=None
        return value_deleted
    def remove_in_bet(self,val):
        head1=self.head
        while(head1.next.data!=val):
            head1=head1.next
        value_deleted=head1.next.data
        head1.next=head1.next.next
        self.size-=1
        return value_deleted


    def display(self):
        head1=self.head
        if self.is_empty():
            print("list is empty")
        else:
            while(head1):
                print(head1.data,end="---->")
                head1=head1.next
l=linked_list()
l.inser_at_last(10)
l.inser_at_last(20)
l.inser_at_last(30)
l.insert_at_begin(50)
l.inert_in_bet(60,3)
l.remove_first()
#l.remove_last()
l.remove_in_bet(60)
l.remove_last()
l.remove_last()
l.remove_last()
l.display()

